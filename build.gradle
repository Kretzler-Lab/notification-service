buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.6.4")
    }
}

plugins {
    id 'com.palantir.docker' version '0.22.1'
}

group = 'kretzlerdevs'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

eclipse {
    project.natures 'org.eclipse.buildship.core.gradleprojectnature'
}


jar {
    baseName='notification-service'
    version= '1.1'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("com.sun.mail:javax.mail:1.6.2")
    implementation 'com.google.guava:guava:33.2.1-jre'
    testImplementation("org.mockito:mockito-core")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation 'junit:junit:4.12'
}

springBoot {
    mainClass = "org.miktmc.Application"
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

def getCurrentGitBranch() {
  if (project.hasProperty('tag')) {
    def tagValue = project.property('tag')
    return tagValue
  } else {
      def gitBranch = "Unknown branch"
      try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
      } catch (e) {
        }
        if (gitBranch == "develop" || gitBranch == "master"){
          return jar.version
        }else{
          return gitBranch
        }
    }
}

docker {
    name "${project.group}/${jar.baseName}:" + getCurrentGitBranch();
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}
